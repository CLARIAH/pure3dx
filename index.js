URLS=[
"control/index.html",
"control/dispatcher.html",
"control/webdavapp.html",
"control/auth.html",
"control/editsessions.html",
"control/config.html",
"control/users.html",
"control/mongo.html",
"control/pages.html",
"control/content.html",
"control/messages.html",
"control/app.html",
"control/viewers.html",
"control/helpers/index.html",
"control/helpers/files.html",
"control/helpers/generic.html"
];
INDEX=[
{
"ref":"control",
"url":0,
"doc":""
},
{
"ref":"control.dispatcher",
"url":1,
"doc":""
},
{
"ref":"control.dispatcher.dispatchWebdav",
"url":1,
"doc":"Leave the url intact after dispatching. This is like DispatcherMiddleware, but after dispatching the full url is passed to the chosen app, instead of removing the prefix that corresponds with the selected mount.",
"func":1
},
{
"ref":"control.webdavapp",
"url":2,
"doc":""
},
{
"ref":"control.webdavapp.getWebdavApp",
"url":2,
"doc":"",
"func":1
},
{
"ref":"control.auth",
"url":3,
"doc":""
},
{
"ref":"control.auth.Auth",
"url":3,
"doc":"All about authorised data access. This class knows users and content, and decides whether the current user is authorised to perform certain actions on content in question. It is instantiated by a singleton object. Parameters      config: AttrDict App-wide configuration data obtained from  control.config.Config.config . Messages: object Singleton instance of  control.messages.Messages . Mongo: object Singleton instance of  control.mongo.Mongo . Users: object Singleton instance of  control.users.Users . Content: object Singleton instance of  control.content.Content ."
},
{
"ref":"control.auth.Auth.clearUser",
"url":3,
"doc":"",
"func":1
},
{
"ref":"control.auth.Auth.getUser",
"url":3,
"doc":"",
"func":1
},
{
"ref":"control.auth.Auth.checkLogin",
"url":3,
"doc":"",
"func":1
},
{
"ref":"control.auth.Auth.authenticate",
"url":3,
"doc":"",
"func":1
},
{
"ref":"control.auth.Auth.authenticated",
"url":3,
"doc":"",
"func":1
},
{
"ref":"control.auth.Auth.deauthenticate",
"url":3,
"doc":"",
"func":1
},
{
"ref":"control.auth.Auth.authorise",
"url":3,
"doc":"",
"func":1
},
{
"ref":"control.auth.Auth.isModifiable",
"url":3,
"doc":"",
"func":1
},
{
"ref":"control.auth.Auth.checkModifiable",
"url":3,
"doc":"",
"func":1
},
{
"ref":"control.editsessions",
"url":4,
"doc":""
},
{
"ref":"control.editsessions.EditSessions",
"url":4,
"doc":""
},
{
"ref":"control.config",
"url":5,
"doc":""
},
{
"ref":"control.config.Config",
"url":5,
"doc":"All configuration details of the app. It is instantiated by a singleton object. Parameters      Messages: object Singleton instance of  control.messages.Messages ."
},
{
"ref":"control.config.Config.checkEnv",
"url":5,
"doc":"",
"func":1
},
{
"ref":"control.config.Config.checkRepo",
"url":5,
"doc":"",
"func":1
},
{
"ref":"control.config.Config.checkVersion",
"url":5,
"doc":"",
"func":1
},
{
"ref":"control.config.Config.checkSecret",
"url":5,
"doc":"",
"func":1
},
{
"ref":"control.config.Config.checkData",
"url":5,
"doc":"",
"func":1
},
{
"ref":"control.config.Config.checkModes",
"url":5,
"doc":"",
"func":1
},
{
"ref":"control.config.Config.checkMongo",
"url":5,
"doc":"",
"func":1
},
{
"ref":"control.config.Config.checkSettings",
"url":5,
"doc":"",
"func":1
},
{
"ref":"control.config.Config.checkAuth",
"url":5,
"doc":"",
"func":1
},
{
"ref":"control.config.Config.checkViewers",
"url":5,
"doc":"",
"func":1
},
{
"ref":"control.config.Config.config",
"url":5,
"doc":"The actual configuration settings are stored here."
},
{
"ref":"control.users",
"url":6,
"doc":""
},
{
"ref":"control.users.Users",
"url":6,
"doc":"All about users and the current users. This class has methods to login/authenticate a user, to logout/deauthenticate users, to retrieve users' data. It is instantiated by a singleton object. Parameters      config: AttrDict App-wide configuration data obtained from  control.config.Config.config . Messages: object Singleton instance of  control.messages.Messages . Mongo: object Singleton instance of  control.mongo.Mongo ."
},
{
"ref":"control.users.Users.wrapTestUsers",
"url":6,
"doc":"",
"func":1
},
{
"ref":"control.mongo",
"url":7,
"doc":""
},
{
"ref":"control.mongo.castObjectId",
"url":7,
"doc":"Try to cast the value as an ObjectId. Paramaters      value:string The value to cast, normally a string representation of a BSON object id. Returns    - objectId | None The corresponding BSON object id if the input is a valid representation of such an id, otherwise  None .",
"func":1
},
{
"ref":"control.mongo.Mongo",
"url":7,
"doc":"CRUD interface to content in the MongoDb database. This class has methods to connect to a MongoDb database, to query its data, to insert, update and delete data. It is instantiated by a singleton object. Parameters      config: AttrDict App-wide configuration data obtained from  control.config.Config.config . Messages: object Singleton instance of  control.messages.Messages ."
},
{
"ref":"control.mongo.Mongo.connect",
"url":7,
"doc":"",
"func":1
},
{
"ref":"control.mongo.Mongo.disconnect",
"url":7,
"doc":"",
"func":1
},
{
"ref":"control.mongo.Mongo.checkCollection",
"url":7,
"doc":"",
"func":1
},
{
"ref":"control.mongo.Mongo.getRecord",
"url":7,
"doc":"",
"func":1
},
{
"ref":"control.mongo.Mongo.execute",
"url":7,
"doc":"",
"func":1
},
{
"ref":"control.pages",
"url":8,
"doc":""
},
{
"ref":"control.pages.Pages",
"url":8,
"doc":"Making responses that can be displayed as web pages. This class has methods that correspond to routes in the app, for which they get the data (using  control.content.Content ), which gets then wrapped in HTML. It is instantiated by a singleton object. Parameters      config: AttrDict App-wide configuration data obtained from  control.config.Config.config . Viewers: object Singleton instance of  control.viewers.Viewers . Messages: object Singleton instance of  control.messages.Messages . Mongo: object Singleton instance of  control.mongo.Mongo . Users: object Singleton instance of  control.users.Users . Content: object Singleton instance of  control.content.Content . Auth: object Singleton instance of  control.auth.Auth . Users: object Singleton instance of  control.users.Users ."
},
{
"ref":"control.pages.Pages.home",
"url":8,
"doc":"",
"func":1
},
{
"ref":"control.pages.Pages.about",
"url":8,
"doc":"",
"func":1
},
{
"ref":"control.pages.Pages.surprise",
"url":8,
"doc":"",
"func":1
},
{
"ref":"control.pages.Pages.projects",
"url":8,
"doc":"",
"func":1
},
{
"ref":"control.pages.Pages.project",
"url":8,
"doc":"",
"func":1
},
{
"ref":"control.pages.Pages.edition",
"url":8,
"doc":"",
"func":1
},
{
"ref":"control.pages.Pages.scene",
"url":8,
"doc":"",
"func":1
},
{
"ref":"control.pages.Pages.scenes",
"url":8,
"doc":"",
"func":1
},
{
"ref":"control.pages.Pages.viewerFrame",
"url":8,
"doc":"",
"func":1
},
{
"ref":"control.pages.Pages.viewerResource",
"url":8,
"doc":"",
"func":1
},
{
"ref":"control.pages.Pages.dataProjects",
"url":8,
"doc":"",
"func":1
},
{
"ref":"control.pages.Pages.page",
"url":8,
"doc":"",
"func":1
},
{
"ref":"control.pages.Pages.navigation",
"url":8,
"doc":"",
"func":1
},
{
"ref":"control.pages.Pages.backLink",
"url":8,
"doc":"",
"func":1
},
{
"ref":"control.pages.Pages.putText",
"url":8,
"doc":"",
"func":1
},
{
"ref":"control.pages.Pages.putTexts",
"url":8,
"doc":"",
"func":1
},
{
"ref":"control.content",
"url":9,
"doc":""
},
{
"ref":"control.content.Content",
"url":9,
"doc":"Retrieving content from database and file system. This class has methods to retrieve various pieces of content from the data sources, and hand it over to the  control.pages.Pages class that will compose a response out of it. It is instantiated by a singleton object. Parameters      config: AttrDict App-wide configuration data obtained from  control.config.Config.config . Viewers: object Singleton instance of  control.viewers.Viewers . Messages: object Singleton instance of  control.messages.Messages . Mongo: object Singleton instance of  control.mongo.Mongo ."
},
{
"ref":"control.content.Content.addAuth",
"url":9,
"doc":"",
"func":1
},
{
"ref":"control.content.Content.getMeta",
"url":9,
"doc":"",
"func":1
},
{
"ref":"control.content.Content.getSurprise",
"url":9,
"doc":"",
"func":1
},
{
"ref":"control.content.Content.getProjects",
"url":9,
"doc":"",
"func":1
},
{
"ref":"control.content.Content.getEditions",
"url":9,
"doc":"",
"func":1
},
{
"ref":"control.content.Content.getScenes",
"url":9,
"doc":"",
"func":1
},
{
"ref":"control.content.Content.getCaption",
"url":9,
"doc":"",
"func":1
},
{
"ref":"control.content.Content.getIcon",
"url":9,
"doc":"",
"func":1
},
{
"ref":"control.content.Content.getViewerFile",
"url":9,
"doc":"",
"func":1
},
{
"ref":"control.content.Content.getData",
"url":9,
"doc":"",
"func":1
},
{
"ref":"control.content.Content.getRecord",
"url":9,
"doc":"",
"func":1
},
{
"ref":"control.messages",
"url":10,
"doc":""
},
{
"ref":"control.messages.Messages",
"url":10,
"doc":"Sending messages to the user and sysadmin. This class has methods to issue messages to the screen of the webuser and to the log for the sysadmin. It is instantiated by a singleton object. Parameters      config: AttrDict App-wide configuration data obtained from  control.config.Config.config ."
},
{
"ref":"control.messages.Messages.clearMessages",
"url":10,
"doc":"",
"func":1
},
{
"ref":"control.messages.Messages.debugAdd",
"url":10,
"doc":"",
"func":1
},
{
"ref":"control.messages.Messages.debug",
"url":10,
"doc":"",
"func":1
},
{
"ref":"control.messages.Messages.error",
"url":10,
"doc":"",
"func":1
},
{
"ref":"control.messages.Messages.warning",
"url":10,
"doc":"",
"func":1
},
{
"ref":"control.messages.Messages.info",
"url":10,
"doc":"",
"func":1
},
{
"ref":"control.messages.Messages.plain",
"url":10,
"doc":"",
"func":1
},
{
"ref":"control.messages.Messages.generateMessages",
"url":10,
"doc":"",
"func":1
},
{
"ref":"control.app",
"url":11,
"doc":""
},
{
"ref":"control.app.prepare",
"url":11,
"doc":"",
"func":1
},
{
"ref":"control.app.appFactory",
"url":11,
"doc":"",
"func":1
},
{
"ref":"control.viewers",
"url":12,
"doc":""
},
{
"ref":"control.viewers.Viewers",
"url":12,
"doc":"Knowledge of the installed 3D viewers. This class knows which (versions of) viewers are installed, and has the methods to invoke them. It is instantiated by a singleton object. Parameters      config: AttrDict App-wide configuration data obtained from  control.config.Config.config ."
},
{
"ref":"control.viewers.Viewers.addAuth",
"url":12,
"doc":"",
"func":1
},
{
"ref":"control.viewers.Viewers.check",
"url":12,
"doc":"",
"func":1
},
{
"ref":"control.viewers.Viewers.getButtons",
"url":12,
"doc":"",
"func":1
},
{
"ref":"control.viewers.Viewers.genHtml",
"url":12,
"doc":"",
"func":1
},
{
"ref":"control.viewers.Viewers.getRoot",
"url":12,
"doc":"",
"func":1
},
{
"ref":"control.helpers",
"url":13,
"doc":""
},
{
"ref":"control.helpers.files",
"url":14,
"doc":""
},
{
"ref":"control.helpers.files.readPath",
"url":14,
"doc":"",
"func":1
},
{
"ref":"control.helpers.files.readFile",
"url":14,
"doc":"",
"func":1
},
{
"ref":"control.helpers.files.readJson",
"url":14,
"doc":"",
"func":1
},
{
"ref":"control.helpers.files.readYaml",
"url":14,
"doc":"",
"func":1
},
{
"ref":"control.helpers.files.dirExists",
"url":14,
"doc":"",
"func":1
},
{
"ref":"control.helpers.files.listFiles",
"url":14,
"doc":"",
"func":1
},
{
"ref":"control.helpers.files.listImages",
"url":14,
"doc":"",
"func":1
},
{
"ref":"control.helpers.generic",
"url":15,
"doc":""
},
{
"ref":"control.helpers.generic.htmlEsc",
"url":15,
"doc":"Escape certain HTML characters by HTML entities. To prevent them to be interpreted as HTML in cases where you need them literally.",
"func":1
},
{
"ref":"control.helpers.generic.AttrDict",
"url":15,
"doc":"Turn a dict into an object with attributes If non-existing attributes are accessed for reading,  None is returned. See: https: stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute And: https: stackoverflow.com/questions/16237659/python-how-to-implement-getattr (especially the remark that >  __getattr__ is only used for missing attribute lookup )"
}
]